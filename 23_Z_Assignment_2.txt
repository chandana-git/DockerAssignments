Your supermarket company is in the process of improving their Docker-based applications. They have built a set of three RESTful data services that communicate with each other as part of a larger infrastructure. You have been given the task of designing a Docker application stack so that these three services can be easily managed and scaled as a unit. A Docker Swarm cluster has already been set up by you to use in previous execises.

Here is some background information on the three services:

1. Fruit Service
	a. Provides a list of fruits sold in the company's stores.
	b. You can use the Docker image tag linuxacademycontent/fruit-service:1.0.1 to run this service.
	c. Listens on port 80.
	d. The service should be named fruit inside the stack.

2. Vegetable Service
	a. Provides a list of vegetables sold in the company's stores.
	b. You can use the Docker image tag linuxacademycontent/vegetable-service:1.0.0 to run this service.
	c. Listens on port 80.
	d. The service should be named vegetables inside the stack.

3. All Products Service
	a. Queries the other two services, combining their data into a single list of all produce.
	b. You can use the Docker image tag linuxacademycontent/all-products:1.0.0 to run this service.
	c. Listens on port 80.
	d. Use the environment variables FRUIT_HOST and FRUIT_PORT to set the host and port which will be used to query the fruit service.
	e. Use the environment variables VEGETABLE_HOST and VEGETABLE_PORT to set the host and port which will be used to query the vegetable service.

Step 1
Deploy a Docker application stack that meets the following specifications:
1. The stack is called produce.
2. The stack runs the Fruit, Vegetable, and All Products services.
3. The All Products service is able to query the Fruit and Vegetable services.
4. The All Products service is published on port 8080.

One you have deployed the stack, you can verify whether it is working by querying the All Products service:

curl localhost:8080

If the stack is set up correctly, you should get a combined list of fruits and vegetables.

Step 2
Once you have deployed the stack and verified that it is working, modify the stack by scaling both the Fruit and Vegetable services up to 3 replicas.


Good luck!
==================================================================================================================
Initialise the docker swarm
$ docker swarm init
Swarm initialized: current node (xmomdilh665beqs354hn4qomx) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-0i9soamb23obybf4pmu6fcg8xdj0ttmepu4wgej9tpd5zs4c7r-1ak2gzxgnbtwoh8mut7rp4nyu 172.17.0.40:2377
$ docker swarm join --token SWMTKN-1-2xlquy4bseo4htgph28imegdw3h452hhdytwhvy7eqfme7fqvn-82jfg704hvepubkosf9yohhbe 172.17.0.40:2377
This node joined a swarm as a worker.

$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
xmomdilh665beqs354hn4qomx *   host01              Ready               Active              Leader          18.09.7
gipyewxs9847ih0w5qs08ebi4     host02              Ready               Active          18.09.7

#Creating stack.yml file
vim stack.yml
version: "3"
services:
 fruit:
  image: linuxacademycontent/fruit-service:1.0.1
  ports:
   - "8081:80"
  
 vegetables:
  image: linuxacademycontent/vegetable-service:1.0.0
  ports:
   - "8082:80"
 
 allProducts:
  image: linuxacademycontent/all-products:1.0.0
  environment:
   - FRUIT_HOST=fruit
     FRUIT_PORT=8081
     VEGETABLE_HOST=vegetables
     VEGETABLE_PORT=8082
  ports:
   - "8080:80"
 #deploying stack file
 $ docker stack deploy -c stack.yml stack
Creating network stack_default
Creating service stack_vegetables
Creating service stack_allProducts
Creating service stack_fruit
$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE                          PORTS
tvochxt6ire6        stack_allProducts   replicated          0/1                 linuxacademycontent/all-products:1.0.0        *:8080->80/tcp
r7o5sgfzieo6        stack_fruit         replicated          1/1                 linuxacademycontent/fruit-service:1.0.1       *:8081->80/tcp
4lu5geojupe5        stack_vegetables    replicated          1/1                 linuxacademycontent/vegetable-service:1.0.0   *:8082->80/tcp

#edit stack.yml for scaling upto 3 replicas
$ vim stack.yml
version: "3"
services:
 fruit:
  image: linuxacademycontent/fruit-service:1.0.1
  ports:
   - "8081:80"
  deploy:
   replicas: 3    
 vegetables:
  image: linuxacademycontent/vegetable-service:1.0.0
  ports:
   - "8082:80"
  deploy:
   replicas: 3   
  
  
 allProducts:
  image: linuxacademycontent/all-products:1.0.0
  environment:
   - FRUIT_HOST=fruit
     FRUIT_PORT=8081
     VEGETABLE_HOST=vegetables
     VEGETABLE_PORT=8082
  ports:
   - "8080:80"
  deploy:
   replicas: 3

#deploy the stack
$ docker stack deploy -c stack.yml stack
Updating service stack_allProducts (id: tvochxt6ire6vdavehovxl84m)
Updating service stack_fruit (id: r7o5sgfzieo6h1o3crdlge41u)
Updating service stack_vegetables (id: 4lu5geojupe5hv1c19hqk0wi7)
$ docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE                          PORTS
tvochxt6ire6        stack_allProducts   replicated          2/3                 linuxacademycontent/all-products:1.0.0        *:8080->80/tcp
r7o5sgfzieo6        stack_fruit         replicated          3/3                 linuxacademycontent/fruit-service:1.0.1       *:8081->80/tcp
4lu5geojupe5        stack_vegetables    replicated          2/3                 linuxacademycontent/vegetable-service:1.0.0   *:8082->80/tcp 
 allProducts:
  image: linuxacademycontent/all-products:1.0.0
  environment:
   - FRUIT_HOST=fruit
     FRUIT_PORT=8081
     VEGETABLE_HOST=vegetables
     VEGETABLE_PORT=8082
  ports:
   - "8080:80"
