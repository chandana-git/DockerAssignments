
1. Install Docker, either on your native OS or on a VM. Make sure it runs. Type "docker -v" to check if it's installed.
docker -v
Docker version 19.03.8, build afacb8b7f

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
docker pull nginx

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
docker images/ docker image -ls

4. Find out the "Full" ImageId of the image that you pulled and write it below.
602e111c06b6

5. Create a container of your image 
docker container run -d --name cont1 nginx
(-d-> run container in background and print container id)
 
6. List all the running containers 
docker ps 
7. List all the running and stopped containers
docker ps -a

8. Find out the "Full" containerId of the container and write it below.
602e111c06b6

9. Find out how many image layers are used to build this image.
docker history nginx(history of image)
docker inspect nginx(display detailed info)

10. Get the Apache Tomcat 7 server image from the docker hub.
docker pull tomcat:7

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
docker run -d --name tomcatrun -p 8081:8080 tomcat:7

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
docker inspect <container_name>
ipaddress=172.17.0.2

13. Which Port it is using?
docker port <container_name>
8080/tcp -> 0.0.0.0:8081


14. Try to access the Tomcat's home page from your machine/vm.
localhost:8080

15. What is the disk size of Apache Tomcat image?
docker images tomcat:7
529MB

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
tomcat inspect <container_name>
		"JAVA_HOME=/usr/local/openjdk-8",
                "JAVA_VERSION=8u252",
                "JAVA_BASE_URL=https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u252-b09/OpenJDK8U-jdk_",
                "JAVA_URL_VERSION=8u252b09",
                "CATALINA_HOME=/usr/local/tomcat"

17. Find out which port is exposed for tomcat?
0.0.0.0:8081->8080->tcp
docker ps

18. Run multiple conntainers of tomcat on different port and access it's home page.
docker run -d --name tomcatrun1 -p 8082:8080 tomcat:7
docker run -d --name tomcatrun -p 8081:8080 tomcat:7

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
docker pull ubuntu:rolling
docker pull ubuntu:focal

20. Run the container of ubuntu in attached mode.
docker run ubuntu:rolling
21. Run the container of another ubuntu in detached mode.
docker run -d ubuntu:rolling
22. Check how many ubuntu containers are running and stopped
docker ps -a
none
23. Is the tomcat container running? If no, start one.
docker run tomcatrun     //(tomcatrun= container name)

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
docker logs -f <container_id>

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
docker run -it ubuntu:rolling sh
quit to exit
docker run -it ubuntu:rolling sh
ctrl+PQ to exit

26. Login as root user in ubuntu container
docker exec -t 75 bash
75->container id(use docker ps to find cont id)
as a root user in bash

27. Create a file with any name in root directory
touch file.txt
ls->to see the files
28. Install software of your choice in ubuntu container using "apt-get install"
apt-get install <software_name>
apt-get install vim
29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
exit

30. Check if the ubuntu container is running.
docker ps
yes

31. Create a new ubuntu container out of the same image as that previous container in attached mode.
docker run -it ubuntu:rolling sh
ctrl+PQ to exit

32. Login as a root user
docker exec -t 13 bash
13->container id(use docker ps to find cont id)

33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
ls
exit
docker stop vigilant_goodall(container name)

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
yes

35. Create an Image out of the existing container.
docker image dreamy_murdock ubuntu_rolling
docker image <prev ubuntu container name> <image of the container name>

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
docker run -it  --name cont1 ubuntu:rolling sh
docker exec -it 67 ls -l
(ls -l-> lists all the files in the container)
67(container id)

37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
yes 
docker stop cont1

38. Create an index.html file with following code in it:-
    <h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.
mkdir DIR
cd DIR
touch index.hml
vim index.html
i->insert
<h1>This is Tomcat Container</h1>
esc and  :wq

vim Dockerfile
FROM nginx:alpine
COPY . /usr/share/nginx/html

$ docker build . -t index
$ docker run -d -p 80:80 html-server-image:v1

curl localhost:80


39. type below command:-
    docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
2. -f
3. -q

write atleast 1 command using each option above and prove their concepts as described in the --help.
-a
docker images -a (shows all images)
-f
$ docker images --filter "dangling=true"(This will display untagged images )
$ docker images --filter "before=image1"
-q
docker images -q(shows only numeric id of images)



40. type below command:-
    docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s
docker ps -a(shows all running/stopped containers)
docker ps -q(displays ids of containers)
docker ps -s(shows file sizes)
docker ps --filter status=running(filters by name,label,status)
docker ps -n(shows n last created containers)
docker ps -l(shows latest container,includes all states)

groupadd -r mygrp && useradd -r -g myuser mygrp
============================================================================================================================================================
If you can't install or configure Docker, you can use the online docker setup to do the assignment.
Step1 Goto:- https://www.katacoda.com/courses/kubernetes/playground
Step2 Click on "continue" button on the left panel
Step3 Click on "launch.sh" button on the left panel
Step4 From the right panel use the top console to execute below command:-
        docker -v

Try below commands for help
    docker --help  ---> This command shows all available options and commands to work with images and containers
    docker image --help ---> This command shows all the avaialble options and commands to work with docker images
    docker container --help ---> This command shows all the avaialble options and commands to work with docker containers
